#!/bin/sh
#
# Copyright 2017 Marko Samuli Kirves. All Rights Reserved.
#
# Create new virtualenv and .autoenv.zsh files for a project.
# The virtualenv name will be based on the current directory, so you
# should run this in your project root.
#
# Requires:
# - https://github.com/yyuu/pyenv
# - https://github.com/yyuu/pyenv-virtualenv
# - https://github.com/Tarrasch/zsh-autoenv
###

if [ -z "$1" ]; then
  virtualenv=$(basename $(pwd))
else
  virtualenv=$1
fi

_latest_python27_version() {
  pyenv install --list | grep -v - | sed 's/  //' | grep '^2.7' | grep -v b | tail -1
}

python_version=${PYTHON_VERSION:=$(_latest_python27_version)}
pyenv_root=${PYENV_ROOT:=${HOME}/.pyenv}

# Install requested Python version if needed
python_installed=$(pyenv versions | grep ${python_version})
if [ "${python_installed}" == "" ]; then
  echo "*** Install Python ${python_version}..."
  pyenv install --verbose ${python_version} || { echo "Failed to install ${python_version}"; exit 1; }
fi

if [ -d "${pyenv_root}/versions/${virtualenv}" ]; then
  echo "*** Virtualenv $virtualenv found, activating..."
else
  echo "*** Creating new virtualenv ${virtualenv} using Python ${python_version}..."
  pyenv virtualenv ${python_version} ${virtualenv} \
    || { echo "Failed to create new virtualenv"; return 1; }
  echo "*** Virtualenv created, activating..."
  sleep 1
fi

pyenv activate ${virtualenv} \
  || { echo "Failed to activate virtualenv"; return 1; }

echo "*** Updating .autoenv.zsh..."
[ -e ".autoenv.zsh" ] \
  && gsed -i '/\(.*\) # Generated by init-pyenv/d' .autoenv.zsh
echo "pyenv activate ${virtualenv} # Generated by init-pyenv" >> .autoenv.zsh

echo "*** Updating .autoenv_leave.zsh..."
[ -e ".autoenv_leave.zsh" ] \
  && gsed -i '/\(.*\) # Generated by init-pyenv/d' .autoenv_leave.zsh
echo "pyenv deactivate # Generated by init-pyenv" >> .autoenv_leave.zsh
